1. **JavaScript ChatGPT Integration**: Connect JavaScript to ChatGPT, taking voice input and generating responses.
    
    here we need two files

gemini.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Text Generator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background: #1c1c1c;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 600px;
            text-align: center;
        }

        h1 {
            margin-bottom: 20px;
            color: #00ffcc;
            font-size: 24px;
        }

        textarea {
            width: 100%;
            height: 150px;
            padding: 15px;
            border: none;
            border-radius: 10px;
            margin-bottom: 20px;
            font-size: 16px;
            resize: none;
            background: #2e2e2e;
            color: #ffffff;
        }

        .buttons {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        button {
            background-color: #00ffcc;
            color: #1c1c1c;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #00ccb3;
        }

        #responseContainer {
            margin-top: 20px;
            padding: 20px;
            border-top: 1px solid #333;
            text-align: left;
            font-size: 16px;
            color: #ffffff;
            background: #2e2e2e;
            border-radius: 10px;
            max-height: 300px;
            overflow-y: auto;
        }

        /* Scrollbar styles */
        #responseContainer::-webkit-scrollbar {
            width: 8px;
        }

        #responseContainer::-webkit-scrollbar-thumb {
            background-color: #00ffcc;
            border-radius: 10px;
        }

        #responseContainer::-webkit-scrollbar-track {
            background: #1c1c1c;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Gemini GPT</h1>
        <textarea id="prompt" placeholder="Enter your prompt here..."></textarea>
        <div class="buttons">
            <button id="voiceButton">ðŸŽ¤ Speak</button>
            <button id="generateButton">Generate</button>
        </div>
        <div id="responseContainer"></div>
    </div>

    <script>
        // Voice input functionality using Web Speech API
        const voiceButton = document.getElementById('voiceButton');
        const promptTextarea = document.getElementById('prompt');

        voiceButton.addEventListener('click', () => {
            // Check if the browser supports the Web Speech API
            if ('webkitSpeechRecognition' in window) {
                const recognition = new webkitSpeechRecognition();
                recognition.lang = 'en-US'; // Set language

                recognition.onstart = function() {
                    voiceButton.textContent = 'ðŸŽ¤ Listening...';
                };

                recognition.onerror = function(event) {
                    console.error('Speech recognition error:', event.error);
                    voiceButton.textContent = 'ðŸŽ¤ Speak';
                };

                recognition.onend = function() {
                    voiceButton.textContent = 'ðŸŽ¤ Speak';
                };

                recognition.onresult = function(event) {
                    const transcript = event.results[0][0].transcript;
                    promptTextarea.value += transcript;
                };

                recognition.start();
            } else {
                alert('Sorry, your browser does not support speech recognition.');
            }
        });

        // Text generation functionality
        document.getElementById('generateButton').addEventListener('click', function() {
            var prompt = document.getElementById('prompt').value;
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/cgi-bin/gemini.py', true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    document.getElementById('responseContainer').innerText = xhr.responseText;
                }
            };

            xhr.send('prompt=' + encodeURIComponent(prompt));
        });
    </script>
</body>
</html>

gemini.py

#!/usr/bin/python3

import cgi
import cgitb
import os
import google.generativeai as genai

# Enable CGI error reporting
cgitb.enable()

print("Content-Type: text/plain\n")

try:
    # Configure the API key
    genai.configure(api_key="apikey")

    # Define the generation configuration
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 64,
        "max_output_tokens": 8192,
        "response_mime_type": "text/plain",
    }

    # Create the generative model
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config=generation_config,
    )

    # Start a chat session
    chat_session = model.start_chat(history=[])

    # Parse form data
    form = cgi.FieldStorage()
    prompt = form.getvalue('prompt')

    if not prompt:
        print("No prompt provided.")
        exit()

    # Send the prompt to the model and get the response
    response = chat_session.send_message(prompt)
    print(response.text)

except Exception as e:
    print(f"Error: {str(e)}")


